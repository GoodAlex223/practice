"""
Start - 18:49/13.06.21
Distinct powers
Problem 29

Consider all integer combinations of a**b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2**2=4, 2**3=8, 2**4=16, 2**5=32
3**2=9, 3**3=27, 3**4=81, 3**5=243
4**2=16, 4**3=64, 4**4=256, 4**5=1024
5**2=25, 5**3=125, 5**4=625, 5**5=3125

If they are then placed in numerical order,
with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
"""
import time
from itertools import permutations


def timer(func):
    def wrapper(arg):
        start = time.time()
        print(func(arg))  # print(func(*arg))
        print(time.time() - start)
        print()
    return wrapper


@timer
def d_powers(limit=100):
    result = set()
    for i in range(2, limit + 1):
        for j in range(2, limit + 1):
            result.add(j ** i)
    return len(result)


# The following solutions have been found on the internet
@timer
def oedipsos(limit=100):
    """Oedipsos -- Wed, 14 Apr 2021, 01:59
    (https://projecteuler.net/action=quote;post_id=380355)"""
    return len(set(a**b for a, b in __import__("itertools").product(range(2, limit + 1), range(2, limit + 1))))


@timer
def joseffruhauf(bound=100):
    """
    https://projecteuler.net/action=quote;post_id=381994
    """
    n, v, boundaries = 0, set(), range(2, bound + 1)
    for k in boundaries:
        if k in v:
            continue
        p, w = 1, set()
        while k ** p <= bound:
            w = w.union({p * m for m in boundaries})
            v.add(k ** p)
            p += 1
        n += len(w)
    return n


@timer
def wheelercode(limit=100):
    bp = list(range(2, limit+1))*2  # Why *2?
    return len({b**p for b, p in {perm for perm in permutations(bp, 2)}})


"""Long-winded counting argument:

Each number which is not a perfect power will have all 99 of their powers be distinct from any others. There are 87 such numbers (25 primes, and then 62 composites which are not powers, like 18 or 24, or for that matter, 62).

Let's now look at the powers of 2 to see a general pattern. The powers of 4 up to 50 will be redundant, so we only get 50 new powers from 4. (This will hold for anything that's exactly a square; thus also for 9, 25, 36, 49, and 100.)

The powers of 8 up to 33 are redundant by powers of 2, and 8^34, 8^36, ..., 8^66 are redundant by powers of 4. These 32 + 17 = 49 redundancies mean we only get 50 (again!) new powers from 8. (This will hold for anything that's exactly a cube; thus also for 27.) Thus 8 of our numbers contribute exactly 50 powers.

The powers of 16 up to 50 will be redundant by powers of 4; 16^51, 16^54, ..., 16^75 will be redundant by powers of 8. Thus we only get 41 new powers from 16. (This will hold for anything that's exactly a fourth power; thus also for 81.) Therefore 2 of our numbers contribute exactly 41 powers.

Now all that's left is to repeat the analysis for 32 and 64, the only remaining higher powers; these give 51 and 37 irredundant powers respectively. Thus our answer must be

87 * 99 + 8 * 50 + 2 * 41 + 51 + 37 = 9183."""


n = 100
d_powers(n)
oedipsos(n)
wheelercode(n)
joseffruhauf(n)  # Fastest

